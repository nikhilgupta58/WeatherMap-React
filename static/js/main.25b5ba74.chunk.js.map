{"version":3,"sources":["components/Search/Search.js","components/Card/Card.js","App.js","reportWebVitals.js","index.js"],"names":["Search","props","className","spellCheck","id","onKeyUp","event","key","city","target","value","type","placeholder","Card","icon","main","date","days","result","Date","setDate","getDate","addDays","now","index","console","log","day","getDay","month","getMonth","dateno","hour","getHours","minute","getMinutes","temp","parseInt","src","alt","App","useState","setCity","country","setCountry","state","setState","lat","setLat","lon","setLon","weather","setWeather","useEffect","url","fetch","then","res","json","message","sys","coord","daily","x","slice","map","e","i","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25b5ba74.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Search.css\";\n\nexport default function Search(props) {\n\n    const inputKeyUpHandler = (event)=>{\n        if(event.key === \"Enter\"){\n            props.city(event.target.value);\n        }\n    }\n\n  return (\n    <>\n      <div className=\"search-box\">\n        <input spellCheck=\"false\" id=\"search\" onKeyUp={inputKeyUpHandler} type=\"text\" placeholder=\"Enter City Name...\" />{\" \"}\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport \"./Card.css\";\n\nexport default function Card(props) {\n  function addDays(date, days) {\n    var result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n  }\n\n  const monthNames = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n\n  const days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n\n  const icon = props.main[0].icon;\n  const main = props.main[0].main;\n\n  let date = addDays(Date.now(), props.index);\n  console.log(date);\n\n  let day = days[date.getDay()];\n  let month = monthNames[date.getMonth()];\n  let dateno = date.getDate();\n  let hour = date.getHours();\n  let minute = date.getMinutes();\n\n  if (hour < 10) {\n    hour = \"0\" + hour;\n  }\n\n  if (minute < 10) {\n    minute = \"0\" + minute;\n  }\n\n  const temp = parseInt(props.temp) - 273;\n\n  return (\n    <>\n      <div className=\"card-con\">\n        <h3>{day}</h3>\n        <p>\n          {month} {dateno}, {hour}:{minute}\n        </p>\n        <img\n          src={`https://openweathermap.org/img/wn/${icon}@2x.png`}\n          alt={main}\n        ></img>\n        <h2>\n          {temp} <span>&#176;</span>C\n        </h2>\n        <p className=\"cond\">{main}</p>\n      </div>\n    </>\n  );\n}\n","import \"./App.css\";\nimport Search from \"./components/Search/Search\";\nimport React, { useState, useEffect } from \"react\";\nimport Card from \"./components/Card/Card\";\n\nfunction App() {\n  const [city, setCity] = useState(\"London\");\n  let configCity = (x) => {\n    setCity(x);\n  };\n  const [country, setCountry] = useState(\"UK\");\n  const [state, setState] = useState({});\n  const [lat, setLat] = useState(51.5085);\n  const [lon, setLon] = useState(-0.1257);\n  const [weather, setWeather] = useState([]);\n  // const [date, setDate] = useState([Date.now()])\n\n  useEffect(() => {\n    let url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=8df2cbc6bd3eeb32371085e31bdb213e`;\n    fetch(url)\n      .then((res) => res.json())\n      .then((res) => setState(res));\n    // eslint-disable-next-line\n  }, [city]);\n\n  useEffect(() => {\n    if (state.message) {\n      console.log(state.message);\n      setCity(\"London\");\n    } else if (state.sys && state.coord) {\n      setCountry(state.sys.country);\n      setLat(state.coord.lat);\n      setLon(state.coord.lon);\n    }\n  }, [state]);\n\n  useEffect(() => {\n    if (lat && lon) {\n      let url = `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=hourly,minutely&appid=8df2cbc6bd3eeb32371085e31bdb213e`;\n      fetch(url)\n        .then((res) => res.json())\n        .then((res) => setWeather(res.daily));\n    }\n    // eslint-disable-next-line\n  }, [lat]);\n\n  useEffect(() => {\n    if (weather) console.log(weather);\n  }, [weather]);\n\n  return (\n    <>\n      <div className=\"container\">\n        <Search city={configCity} />\n        <h1>5-Day Forecast.</h1>\n        <p>\n          {city}, {country}\n        </p>\n        <div className=\"card-container\">\n          {weather.slice(0, 5).map((e, i) => (\n            <Card key={i} temp={e.temp.day} main={e.weather} index={i}/>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}